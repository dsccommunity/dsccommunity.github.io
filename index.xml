<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DSC Community</title>
    <link>https://dsccommunity.org/</link>
    <description>Recent content on DSC Community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2019 the dsccommunity.org contributors.</copyright>
    <lastBuildDate>Tue, 24 Sep 2019 16:37:42 +0200</lastBuildDate>
    
	<atom:link href="https://dsccommunity.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Next Community Call 2019-09-11</title>
      <link>https://dsccommunity.org/community_calls/next_call/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dsccommunity.org/community_calls/next_call/</guid>
      <description>How to join
Agenda  Feel free to send a PR to this file if there&amp;rsquo;s something you&amp;rsquo;d like to add to the agenda  Resources to be released  ActiveDirectoryDsc ComputerManagementDsc (BREAKING CHANGE - ScheduleTask) DFSDsc (Fix to get the examples to be published) NetworkingDsc SharePointDsc (might not be released) StorageDsc WmiNamespaceSecurityDsc (former WmiNamespaceSecurity) xDnsServer xFailOverCluster xHyper-V xPSDesiredStateConfiguration xRemoteDesktopSessionHost xSCSMA xWebAdministration  Deprecated  xRemoteDesktopAdmin (moved to ComputerManagementDsc) (No PR to deprecate yet) xPendingReboot (moved to ComputerManagementDsc)  Should leaving unsupported OS be treated as breaking change For example Windows Server 2008 R2 is leaving extended support.</description>
    </item>
    
    <item>
      <title>Future of Configuration Management</title>
      <link>https://dsccommunity.org/configmgt/future-of-config-mgt/</link>
      <pubDate>Wed, 31 Jul 2019 16:44:09 +0200</pubDate>
      
      <guid>https://dsccommunity.org/configmgt/future-of-config-mgt/</guid>
      <description>It&amp;rsquo;s good to make sure we understand the world in which DSC evolves, so I thought of writing this post below. Unfortunately, the future is not something we can predict, so this is just a personal opinion, which I hope you&amp;rsquo;ll find useful.
Configuration Management evolution Some like to classify different configuration management models, but I prefer to show them as an evolution of similar principles, that happened with the evolution of technology and principles.</description>
    </item>
    
    <item>
      <title>Origin Story</title>
      <link>https://dsccommunity.org/community/origin-story/</link>
      <pubDate>Tue, 30 Jul 2019 15:36:48 +0200</pubDate>
      
      <guid>https://dsccommunity.org/community/origin-story/</guid>
      <description>The DSC Resource Kit A lot has changed since the creation of the DSC Resource Kit back in 2013â€”the PowerShell/DSC Team initiative was created to seed the DSC Ecosystem.
The intention then was to illustrate the capabilities of DSC, and solve realistic configuration scenarios to build a community of users. The team had been developing the resources and publishing them as the PowerShell Team in TechNet Gallery, long before the PowerShell Gallery existed.</description>
    </item>
    
    <item>
      <title>What is Desired State Configuration</title>
      <link>https://dsccommunity.org/help/what-is-dsc/</link>
      <pubDate>Tue, 30 Jul 2019 10:56:10 +0200</pubDate>
      
      <guid>https://dsccommunity.org/help/what-is-dsc/</guid>
      <description>As per the official documentation, Desired State Configuration (DSC) is a management platform in PowerShell.
It is built around different components:
 DSC DSL: The Domain Specific Language of DSC with the Configuration keyword. DSC LCM: The Local Configuration Manager (LCM), that can be seen as the agent enacting the configurations on the managed nodes. DSC Resources: A rich ecosystem of modules exposing a declarative and idempotent interface to imperative code configuring resources.</description>
    </item>
    
    <item>
      <title>Ownership of DSC Resources</title>
      <link>https://dsccommunity.org/community/ownership/</link>
      <pubDate>Thu, 18 Jul 2019 15:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/community/ownership/</guid>
      <description>Goal and purpose Previously owned by the DSC Team, and more specifically by Katie, the DSC Resources are now owned by the DSC Community: a collective of Open Source maintainers getting together to improve the Resources, their quality and the practices around DSC.
The main purpose is to handle better the increased community contributions, and remove hindrance to improvements by spreading the load on a Committee, and giving more privileges to the maintainers.</description>
    </item>
    
    <item>
      <title>Create an Article</title>
      <link>https://dsccommunity.org/blog/create-an-article/</link>
      <pubDate>Fri, 08 Mar 2019 12:41:48 +0800</pubDate>
      
      <guid>https://dsccommunity.org/blog/create-an-article/</guid>
      <description>Creating the md file is easy, but you might want to double check how it will render on the website. To do so, we recommend you to install Hugo (using Chocolatey it&amp;rsquo;s just a choco install hugo) and test what you create.
But when you have installed hugo, forked the dsccommunity.org, and cloned your fork locally, you can generate a post from the template, from the source directory: &amp;gt; C:\src\dsccommunity.org &amp;gt; hugo new blog/your-title-in-lowercase.</description>
    </item>
    
    <item>
      <title>Our Standards</title>
      <link>https://dsccommunity.org/code_of_conduct/standards/</link>
      <pubDate>Tue, 29 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/code_of_conduct/standards/</guid>
      <description>Examples of behavior that contributes to creating a positive environment include:
 Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members  Examples of unacceptable behavior by participants include:
 The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others&amp;rsquo; private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting  </description>
    </item>
    
    <item>
      <title>Markdown Files</title>
      <link>https://dsccommunity.org/guidelines/markdown-files/</link>
      <pubDate>Mon, 28 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/guidelines/markdown-files/</guid>
      <description>Line length not longer than 80 characters Rows longer than 80 characters should be split into multiple lines where appropriate. This helps make it easier for reviewers to make review comments and for the contributors to see where the requested changes are (without scrolling). It is also easier to see the lines in split view mode when the lines don&amp;rsquo;t wrap on the screen. It will also improve the readability when using git diff.</description>
    </item>
    
    <item>
      <title>What Future for Dsc</title>
      <link>https://dsccommunity.org/help/what-future-for-dsc/</link>
      <pubDate>Tue, 30 Jul 2019 11:35:49 +0200</pubDate>
      
      <guid>https://dsccommunity.org/help/what-future-for-dsc/</guid>
      <description>Despite the few &amp;ldquo;DSC Planning Updates&amp;ldquo; written by Michael Greene (Program Manager for DSC, and DSC Community Committee member), there are still misunderstandings by the community with regards to the directions Microsoft is taking for DSC and its ecosystem.
Here, we&amp;rsquo;ll try to explain what we understand from the DSC Community.
Former plans &amp;amp; realignment Microsoft&amp;rsquo;s DSC Team, about a year and an half ago, was working on a new version of the LCM component of the DSC Platform.</description>
    </item>
    
    <item>
      <title>DSC Community Committee</title>
      <link>https://dsccommunity.org/community/committee/</link>
      <pubDate>Tue, 29 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/community/committee/</guid>
      <description>The following is an explanation of what the DSC Committee is attempting to help with, and how we are trying to help the community.
Come and chat with us if you would like to discuss how we can improve and build a better community!
Members 
Katie is the owner of the Resource Kit at Microsoft and has steered its direction over the years. She is also an active member of the Engineering team at Microsoft looking after all things DSC as well as Azure Guest Configuration, and can bridge the communication between the new products and features leveraging DSC and the DSC Community.</description>
    </item>
    
    <item>
      <title>Our Responsibilities</title>
      <link>https://dsccommunity.org/code_of_conduct/responsibilities/</link>
      <pubDate>Tue, 29 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/code_of_conduct/responsibilities/</guid>
      <description>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.
Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</description>
    </item>
    
    <item>
      <title>General</title>
      <link>https://dsccommunity.org/guidelines/general/</link>
      <pubDate>Mon, 28 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/guidelines/general/</guid>
      <description>Correct File Encoding Make sure all files are encoded using UTF-8 (not UTF-8 with BOM), except mof files which should be encoded using ASCII. You can use ConvertTo-UTF8 and ConvertTo-ASCII to convert a file to UTF-8 or ASCII.
Descriptive Names Use descriptive, clear, and full names for all variables, parameters, and functions. All names must be at least more than 2 characters. No abbreviations should be used.
Bad:
$r = Get-RdsHost  Bad:</description>
    </item>
    
    <item>
      <title>Maintainers</title>
      <link>https://dsccommunity.org/community/maintainers/</link>
      <pubDate>Tue, 29 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/community/maintainers/</guid>
      <description>Here is a list of the current maintainers of DSC modules in the DSC Community. If you wish to be a maintainer in a module, please either contact a maintainer of the module, or a member of the committee. If you are a maintainer and feel you no longer have the time to put in and want to stop being maintainer then please send in a PR to update this list, or contact a member of the committee.</description>
    </item>
    
    <item>
      <title>Scope</title>
      <link>https://dsccommunity.org/code_of_conduct/scope/</link>
      <pubDate>Tue, 29 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/code_of_conduct/scope/</guid>
      <description>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</description>
    </item>
    
    <item>
      <title>Whitespace</title>
      <link>https://dsccommunity.org/guidelines/whitespace/</link>
      <pubDate>Mon, 28 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/guidelines/whitespace/</guid>
      <description>Indentation For all indentation, use 4 spaces instead of tabs. There should be no tab characters in the file unless they are in a here-string.
No Trailing Whitespace After Backticks Backticks should always be directly followed by a newline
Newline at End of File All files must end with a newline, see StackOverflow.
Newline Character Encoding Save newlines using CR+LF instead of CR. For interoperability reasons, we recommend that you follow these instructions when installing Git on Windows so that newlines saved to GitHub are simply CRs.</description>
    </item>
    
    <item>
      <title>Enforcement</title>
      <link>https://dsccommunity.org/code_of_conduct/enforcement/</link>
      <pubDate>Tue, 29 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/code_of_conduct/enforcement/</guid>
      <description>Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at dsccommunity@outlook.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.
Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project&amp;rsquo;s leadership.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://dsccommunity.org/guidelines/functions/</link>
      <pubDate>Mon, 28 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/guidelines/functions/</guid>
      <description>Function Names Use Pascal Case Function names must use PascalCase. This means that each concatenated word is capitalized.
Bad:
function get-targetresource { # ... }  Good:
function Get-TargetResource { # ... }  Function Names Use Verb-Noun Format All function names must follow the standard PowerShell Verb-Noun format.
Bad:
function TargetResourceGetter { # ... }  Good:
function Get-TargetResource { # ... }  Function Names Use Approved Verbs All function names must use approved verbs.</description>
    </item>
    
    <item>
      <title>Common Questions</title>
      <link>https://dsccommunity.org/code_of_conduct/common_questions/</link>
      <pubDate>Tue, 29 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/code_of_conduct/common_questions/</guid>
      <description>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</description>
    </item>
    
    <item>
      <title>Parameters</title>
      <link>https://dsccommunity.org/guidelines/parameters/</link>
      <pubDate>Mon, 28 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/guidelines/parameters/</guid>
      <description>Correct Format for Parameter Block  An empty parameter block should be displayed on its own line like this: param (). A non-empty parameter block should have the opening and closing parentheses on their own line. All text inside the parameter block should be indented once. Every parameter should include the [Parameter()] attribute, regardless of whether the attribute requires decoration or not. A parameter that is mandatory should contain this decoration: [Parameter(Mandatory = $true)].</description>
    </item>
    
    <item>
      <title>Attribution</title>
      <link>https://dsccommunity.org/code_of_conduct/attribution/</link>
      <pubDate>Tue, 29 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/code_of_conduct/attribution/</guid>
      <description>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://dsccommunity.org/guidelines/variables/</link>
      <pubDate>Mon, 28 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/guidelines/variables/</guid>
      <description>Variable Names Use Camel Case Variable names should use camelCase.
Bad:
function Write-Log { $VerboseMessage = &#39;New log message&#39; Write-Verbose $VerboseMessage }  Bad:
function Write-Log { $verbosemessage = &#39;New log message&#39; Write-Verbose $verbosemessage }  Good:
function Write-Log { $verboseMessage = &#39;New log message&#39; Write-Verbose $verboseMessage }  Script, Environment and Global Variable Names Include Scope Script, environment, and global variables must always include their scope in the variable name unless the &amp;lsquo;using&amp;rsquo; scope is needed.</description>
    </item>
    
    <item>
      <title>General Best Practices</title>
      <link>https://dsccommunity.org/guidelines/general-best-practices/</link>
      <pubDate>Mon, 28 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/guidelines/general-best-practices/</guid>
      <description>Although adopting the best practices is optional, doing so will help improve the quality of the DSC resource module.
Note: Modules that aim to meet the High Quality Resource Module standards must also implement the best practices wherever possible.
Avoid Using ard coded Computer Name Using hard coded computer names exposes sensitive information on your machine. Use a parameter or environment variable instead if a computer name is necessary. This comes from this PS Script Analyzer rule.</description>
    </item>
    
    <item>
      <title>Calling Functions</title>
      <link>https://dsccommunity.org/guidelines/calling-functions/</link>
      <pubDate>Mon, 28 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/guidelines/calling-functions/</guid>
      <description>Avoid Cmdlet Aliases When calling a function use the full command not an alias. You can get the full command an alias represents by calling Get-Alias.
Bad:
ls -File $root -Recurse | ? { @(&#39;.gitignore&#39;, &#39;.mof&#39;) -contains $_.Extension }  Good:
Get-ChildItem -File $root -Recurse | Where-Object -FilterScript { @(&#39;.gitignore&#39;, &#39;.mof&#39;) -contains $_.Extension }  Avoid Invoke-Expression Invoke-Expression is vulnerable to string injection attacks. It should not be used in any DSC resources.</description>
    </item>
    
    <item>
      <title>Writing Functions</title>
      <link>https://dsccommunity.org/guidelines/writing-functions/</link>
      <pubDate>Mon, 28 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/guidelines/writing-functions/</guid>
      <description>Avoid Default Values for Mandatory Parameters Default values for mandatory parameters will always be overwritten, thus they are never used and can cause confusion.
Bad:
function Get-Something { param ( [Parameter(Mandatory = $true)] [String] $Name = &#39;My Name&#39; ) ... }  Good:
function Get-Something { param ( [Parameter(Mandatory = $true)] [String] $Name ) ... }  Avoid Default Values for Switch Parameters Switch parameters have 2 values - there or not there.</description>
    </item>
    
    <item>
      <title>Join the Conversation</title>
      <link>https://dsccommunity.org/community/contact/</link>
      <pubDate>Tue, 29 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/community/contact/</guid>
      <description>The #DSC Channel The community gathers in the Virtual PowerShell User Group #DSC channel, which is an open &amp;amp; instant messaging chat room for all DSC related questions, discussions, and collaboration.
The PowerShell channels are bridged between Discord and Slack, so you can use either service, via the apps or websites.
The Virtual PowerShell User Group contains more than just the #DSC channel: there are also channels covering topics related to PowerShell, DevOps as well as many other and practices and technologies, so you may also join them too.</description>
    </item>
    
    <item>
      <title>Dsc Resource Functions</title>
      <link>https://dsccommunity.org/guidelines/dsc-resource-functions/</link>
      <pubDate>Mon, 28 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/guidelines/dsc-resource-functions/</guid>
      <description>Return a Hashtable from Get-TargetResource Bad:
 Good:
 Return a Boolean from Test-TargetResource Bad:
 Good:
 Avoid Returning Anything From Set-TargetResource Bad:
 Good:
 Define Get-TargetResource, Set-TargetResource, and Test-TargetResource for Every DSC Resource Bad:
 Good:
 Get-TargetResource should not contain unused non-mandatory parameters The inclusion of a non-mandatory parameter that is never used could signal that there is a design flaw in the implementation of the Get-TargetResource function.</description>
    </item>
    
    <item>
      <title>Manifest</title>
      <link>https://dsccommunity.org/guidelines/manifest/</link>
      <pubDate>Mon, 28 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/guidelines/manifest/</guid>
      <description>Avoid Using Deprecated Manifest Fields Bad:
 Good:
 Ensure Manifest Contains Correct Fields Bad:
 Good:
 Do not use NestedModules to export shared commands Since we don&amp;rsquo;t use the RootModule key in the module manifest, we should not use the NestedModules key to add modules that export commands that are shared between resource modules.
Normally, a single list in the RootModule key, can restrict what is exported using the cmdlet Export-ModuleMember.</description>
    </item>
    
    <item>
      <title>Localization</title>
      <link>https://dsccommunity.org/guidelines/localization/</link>
      <pubDate>Mon, 28 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/guidelines/localization/</guid>
      <description>In each resource folder there should be at least one localization folder for english language &amp;lsquo;en-US&amp;rsquo;. Add other localization folders as appropriate, the correct folder name can be found by running Get-UICulture on the node that has a UI culture installed that the strings are being built for. There is also the list of Available Language Packs for Windows.
In each localization folder there should be a PowerShell data (.</description>
    </item>
    
    <item>
      <title>Pester Tests</title>
      <link>https://dsccommunity.org/guidelines/pester-tests/</link>
      <pubDate>Mon, 28 Jan 2019 11:02:05 +0600</pubDate>
      
      <guid>https://dsccommunity.org/guidelines/pester-tests/</guid>
      <description>Capitalized Pester Assertions Pester assertions should all start with capital letters. This makes code easier to read.
Bad:
it &#39;Should return something&#39; { get-targetresource @testParameters | should -be &#39;something&#39; }  Good:
It &#39;Should return something&#39; { Get-TargetResource @testParameters | Should -Be &#39;something&#39; }  Assertion Messages Start with Should Pester assertions should always start with the word &amp;lsquo;Should&amp;rsquo;. This is to ensure the test results read more naturally as well as helping to indentify assertion messages that aren&amp;rsquo;t making assertions.</description>
    </item>
    
    <item>
      <title>2019-07-31 Notes</title>
      <link>https://dsccommunity.org/community_calls/2019-07-31-notes/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dsccommunity.org/community_calls/2019-07-31-notes/</guid>
      <description>The community call was recorded, you can listen here.
  Agenda Resource Kit August 2019 See resources to be released below.
DSC Community Logo The logo will be published on https://dsccommunity.org with a license granting everyone to use it.
DSC Community Organization Gael talked about the new organization (listen back to the recording when it is available, and you can read more about it here https://dsccommunity.org/community/)
DSC Community Committee Read more about it here https://dsccommunity.</description>
    </item>
    
    <item>
      <title>2019-06-19 Notes</title>
      <link>https://dsccommunity.org/community_calls/2019-06-19-notes/</link>
      <pubDate>Sat, 01 Jun 2019 23:35:30 +0200</pubDate>
      
      <guid>https://dsccommunity.org/community_calls/2019-06-19-notes/</guid>
      <description>Resources to be released There are 7 modules on track for release on Wednesday June 26:
 CertificateDsc NetworkingDsc PSDscResources SharePointDsc SqlServerDsc (BREAKING CHANGE) xActiveDirectory xDnsServer  Discussions  Topics or questions from the community (welcome at any point during the call) Ben Gelens not able to maintain xHyper-V anymore DSC Community Logo Waffle board has closed, Migrated to GitHub board, but not great Talk to us on PoshCode slack: the #dsc channel in either Slack or Discord.</description>
    </item>
    
    <item>
      <title>2019-05-08 Notes</title>
      <link>https://dsccommunity.org/community_calls/2019-05-08-notes/</link>
      <pubDate>Sun, 28 Jul 2019 23:35:30 +0200</pubDate>
      
      <guid>https://dsccommunity.org/community_calls/2019-05-08-notes/</guid>
      <description>Resources to be released  TBC  Discussions  Topics or questions from the community (welcome at any point during the call) Celebrating new maintainers:  Brian Wilhite &amp;ndash;&amp;gt; xPendingReboot Jason Patton &amp;ndash;&amp;gt; xDnsServer Nehru Ali &amp;ndash;&amp;gt; xPendingReboot Brian Wilhite &amp;ndash;&amp;gt; xPendingReboot Johan Ljunggren &amp;ndash;&amp;gt; xSmbShare (this resource is being moved to ComputerManagementDsc) Jason Ryberg &amp;ndash;&amp;gt; xActiveDirectory, ActiveDirectoryCSDsc and xAzure Mike Beggs &amp;ndash;&amp;gt; NetworkingDsc and xDhcpServer Ryan Christman &amp;ndash;&amp;gt; xActiveDirectory Jan-Hendrik Peters &amp;ndash;&amp;gt; xActiveDirectory and xSCVMM Chase Wilson &amp;ndash;&amp;gt; xAzure and xFirefox  Waffle board will be closing, still looking into a replacement Moving off gitter to PoshCode slack: the #dsc channel in either Slack or Discord.</description>
    </item>
    
    <item>
      <title>How to Use Dsc Logging</title>
      <link>https://dsccommunity.org/blog/how-to-use-dsc-logging/</link>
      <pubDate>Tue, 24 Sep 2019 16:37:42 +0200</pubDate>
      
      <guid>https://dsccommunity.org/blog/how-to-use-dsc-logging/</guid>
      <description>The Local Configuration Manager (LCM) in PowerShell Desired State Configuration (DSC) logs its deployment progress and errors on several places. The most commonly known location is the event log, where errors are logged in the log: Applications and Services Logs \ Microsoft \ Windows \ Desired State Configuration \ Operational
This log contains various events that were generated during a DSC job, it is however less useful to track the progress of a running job.</description>
    </item>
    
    <item>
      <title>Realizing maintenance windows with DSC</title>
      <link>https://dsccommunity.org/blog/dsc-maintenance-windows/</link>
      <pubDate>Thu, 08 Aug 2019 18:11:05 +0200</pubDate>
      
      <guid>https://dsccommunity.org/blog/dsc-maintenance-windows/</guid>
      <description>Introduction Since 2017 I have been involved in a number of DSC projects in medium to very large enterprises. It has not been easy to implement DSC for a number of reasons. For some companies, the reason why DSC was not an option is the lack of support for maintenance windows. DSC runs whenever an internal timer expires. This is fine for some enterprises but not for all.
This article summarizes the ideas and technical implementation I have worked on with two large enterprises.</description>
    </item>
    
  </channel>
</rss>