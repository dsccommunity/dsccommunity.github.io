<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog Posts on DSC Community</title>
    <link>https://dsccommunity.org/blog/</link>
    <description>Recent content in Blog Posts on DSC Community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2019 the dsccommunity.org contributors.</copyright>
    <lastBuildDate>Sat, 29 Dec 2018 11:02:05 +0600</lastBuildDate>
    
	<atom:link href="https://dsccommunity.org/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create an Article</title>
      <link>https://dsccommunity.org/blog/create-an-article/</link>
      <pubDate>Fri, 08 Mar 2019 12:41:48 +0800</pubDate>
      
      <guid>https://dsccommunity.org/blog/create-an-article/</guid>
      <description>Creating the md file is easy, but you might want to double check how it will render on the website. To do so, we recommend you to install Hugo (using Chocolatey it&amp;rsquo;s just a choco install hugo) and test what you create.
But when you have installed hugo, forked the dsccommunity.org, and cloned your fork locally, you can generate a post from the template, from the source directory:
 C:\src\dsccommunity.org &amp;gt; hugo new blog/your-title-in-lowercase.</description>
    </item>
    
    <item>
      <title>Converting tests to Pester 5</title>
      <link>https://dsccommunity.org/blog/converting-tests-to-pester5/</link>
      <pubDate>Sun, 17 May 2020 05:00:00 +0100</pubDate>
      
      <guid>https://dsccommunity.org/blog/converting-tests-to-pester5/</guid>
      <description>If you have any questions or suggestions around this blog post then please reach out to @johlju in the Virtual PowerShell User Group #DSC channel.
Pester Pester, the famous DSL and module in the PowerShell community, is used throughout the DSC modules and their common modules to ensure we maintain quality for all new contributions by testing any addition and verify they work with the rest of the code to avoid regression.</description>
    </item>
    
    <item>
      <title>Add Codecov Support to Repository</title>
      <link>https://dsccommunity.org/blog/add-codecov-support-to-repository/</link>
      <pubDate>Mon, 03 Feb 2020 19:17:35 +0100</pubDate>
      
      <guid>https://dsccommunity.org/blog/add-codecov-support-to-repository/</guid>
      <description>This assumes the repository is using the pattern from the Sampler project.
With the release of Pester v4.10 it is now possible to upload the Pester generated JoCoCo file to Codecov.io. This is the same file that is used to upload code coverage to Azure Pipelines. Codecov.io needed missing attributes to be part of the JaCoCo XML file. Those attributes that were missing were ignored by Azure Pipelines.
The DSC Community GitHub organization has already added the Codecov GitHub App on all existing repositories in the organization.</description>
    </item>
    
    <item>
      <title>DscResource.Common functions in a DSC module</title>
      <link>https://dsccommunity.org/blog/use-dscresource-common-functions-in-module/</link>
      <pubDate>Sat, 11 Jan 2020 15:45:00 +0100</pubDate>
      
      <guid>https://dsccommunity.org/blog/use-dscresource-common-functions-in-module/</guid>
      <description>What This article will explain the steps needed to use a version of the DscResource.Common module that has been released to the PowerShell Gallery.
The module DscResource.Common currently has 7 cmdlets.
 Get-LocalizedData New-InvalidArgumentException New-InvalidOperationException New-NotImplementedException New-InvalidResultException New-ObjectNotFoundException Test-DscParameterState  Why Historically, these functions have been duplicated into many DSC resource modules. This has resulted in duplication of effort in maintaining them as well as drift in the code base and feature set with some fixes not being included.</description>
    </item>
    
    <item>
      <title>Steps to convert a module for continuous delivery</title>
      <link>https://dsccommunity.org/blog/convert-a-module-for-continuous-delivery/</link>
      <pubDate>Mon, 30 Dec 2019 12:52:00 +0100</pubDate>
      
      <guid>https://dsccommunity.org/blog/convert-a-module-for-continuous-delivery/</guid>
      <description>You are welcome to share any comments or issues you having around this process in the Discord or Slack #DSC channel.
Before you start, here&amp;rsquo;s an overview of what the new CI looks like:    NOTE: The build is running on Linux in the CI pipeline to be able to support cross-platform DSC resources, so that makes all paths case-sensitive! Have that in mind when updating paths and folders in the configuration files.</description>
    </item>
    
    <item>
      <title>How to Use Dsc Logging</title>
      <link>https://dsccommunity.org/blog/how-to-use-dsc-logging/</link>
      <pubDate>Tue, 24 Sep 2019 16:37:42 +0200</pubDate>
      
      <guid>https://dsccommunity.org/blog/how-to-use-dsc-logging/</guid>
      <description>The Local Configuration Manager (LCM) in PowerShell Desired State Configuration (DSC) logs its deployment progress and errors on several places. The most commonly known location is the event log, where errors are logged in the log: Applications and Services Logs \ Microsoft \ Windows \ Desired State Configuration \ Operational
This log contains various events that were generated during a DSC job, it is however less useful to track the progress of a running job.</description>
    </item>
    
    <item>
      <title>Realizing maintenance windows with DSC</title>
      <link>https://dsccommunity.org/blog/dsc-maintenance-windows/</link>
      <pubDate>Thu, 08 Aug 2019 18:11:05 +0200</pubDate>
      
      <guid>https://dsccommunity.org/blog/dsc-maintenance-windows/</guid>
      <description>Introduction Since 2017 I have been involved in a number of DSC projects in medium to very large enterprises. It has not been easy to implement DSC for a number of reasons. For some companies, the reason why DSC was not an option is the lack of support for maintenance windows. DSC runs whenever an internal timer expires. This is fine for some enterprises but not for all. This article summarizes the ideas and technical implementation I have worked on with two large enterprises.</description>
    </item>
    
  </channel>
</rss>