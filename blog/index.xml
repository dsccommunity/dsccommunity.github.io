<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog Posts on DSC Community</title>
    <link>https://dsccommunity.org/blog/</link>
    <description>Recent content in Blog Posts on DSC Community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2019 the dsccommunity.org contributors.</copyright>
    <lastBuildDate>Sat, 29 Dec 2018 11:02:05 +0600</lastBuildDate><atom:link href="https://dsccommunity.org/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Create an Article</title>
      <link>https://dsccommunity.org/blog/create-an-article/</link>
      <pubDate>Fri, 08 Mar 2019 12:41:48 +0800</pubDate>
      
      <guid>https://dsccommunity.org/blog/create-an-article/</guid>
      <description>Creating the md file is easy, but you might want to double check how it will render on the website. To do so, we recommend you to install Hugo (using Chocolatey it&amp;rsquo;s just a choco install hugo) and test what you create.
But when you have installed hugo, forked the dsccommunity.org, and cloned your fork locally, you can generate a post from the template, from the source directory:
 C:\src\dsccommunity.org &amp;gt; hugo new blog/your-title-in-lowercase.</description>
    </item>
    
    <item>
      <title>DSC is Dead</title>
      <link>https://dsccommunity.org/blog/dsc-is-dead-long-live-dsc/</link>
      <pubDate>Sat, 30 May 2020 23:00:00 +0100</pubDate>
      
      <guid>https://dsccommunity.org/blog/dsc-is-dead-long-live-dsc/</guid>
      <description>Hi PowerShell and DSC folks!
I wanted to share the PSConfEU session Michael and myself have recorded on DSC and Guest Configuration.
There will be a live Q&amp;amp;A on the Wednesday 3rd of June at 6PM CEST (9AM Pacific Time), so make sure you have watched and submit any further question. Tune-in as early as Tuesday 2nd of June 5PM CEST to watch the live Opening and Keynote with Tobias, Jeffrey Snover and Joey Aiello.</description>
    </item>
    
    <item>
      <title>Convert tests to Pester 5 for a DSC Community repository</title>
      <link>https://dsccommunity.org/blog/convert-tests-to-pester5-for-dsc-community-repository/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0200</pubDate>
      
      <guid>https://dsccommunity.org/blog/convert-tests-to-pester5-for-dsc-community-repository/</guid>
      <description>This blog post will guide you on how to convert existing tests in a DSC Community DSC resource module repository using a new pattern that is better suited for Pester 5.
You are welcome to share any comments or issues you having around this process in the Discord or Slack #DSC channel.
This previous blog post Converting tests to Pester 5 covered an early version of Pester 5 and the patterns that should be used have been improved (and are still being improved).</description>
    </item>
    
    <item>
      <title>Class Based DSC Resource only proposal</title>
      <link>https://dsccommunity.org/blog/class-based-dsc-resources/</link>
      <pubDate>Fri, 02 Oct 2020 10:00:00 +0200</pubDate>
      
      <guid>https://dsccommunity.org/blog/class-based-dsc-resources/</guid>
      <description>Recently, the PowerShell team announced plans to create a new JSON-based schema so that eventually PowerShell Desired State Configuration (DSC) could get rid of its MOF/CIM dependencies, and the PowerShell code base could remove its deprecated Management Interface (MI) implementation (Microsoft.Management.Infrastructure.CimProperty, Microsoft.Management.Infrastructure.CimInstance and so on&amp;hellip;).
The suggested change was only for DSC Resources schema, and no changes to MOF compilations was announced for now. Removing the CIM/MI/MOF code and dependency is definitely an overarching goal for PowerShell, but it won&amp;rsquo;t happen overnight.</description>
    </item>
    
    <item>
      <title>Converting tests to Pester 5</title>
      <link>https://dsccommunity.org/blog/converting-tests-to-pester5/</link>
      <pubDate>Sun, 17 May 2020 05:00:00 +0100</pubDate>
      
      <guid>https://dsccommunity.org/blog/converting-tests-to-pester5/</guid>
      <description>If you have any questions or suggestions around this blog post then please reach out to @johlju in the Virtual PowerShell User Group #DSC channel.
UPDATE: To convert tests for a repository in DSC Community also see the blog Convert tests to Pester 5 for a DSC Community repository
Pester Pester, the famous DSL and module in the PowerShell community, is used throughout the DSC modules and their common modules to ensure we maintain quality for all new contributions by testing any addition and verify they work with the rest of the code to avoid regression.</description>
    </item>
    
    <item>
      <title>Add Code Coverage Support to Repository</title>
      <link>https://dsccommunity.org/blog/add-codecov-support-to-repository/</link>
      <pubDate>Mon, 03 Feb 2020 19:17:35 +0100</pubDate>
      
      <guid>https://dsccommunity.org/blog/add-codecov-support-to-repository/</guid>
      <description>This assumes the repository is using the pattern from the Sampler project. Also make sure you have updated the repository to the latest pipeline.
Table of Contents  Introduction Not building module, just copying files Building whole or part of module Code coverage for multiple jobs  Introduction With the release of Pester v4.10 it is now possible to upload the Pester generated JoCoCo file. The same file is used to upload code coverage to both Azure Pipelines and to Codecov.</description>
    </item>
    
    <item>
      <title>DscResource.Common functions in a DSC module</title>
      <link>https://dsccommunity.org/blog/use-dscresource-common-functions-in-module/</link>
      <pubDate>Sat, 11 Jan 2020 15:45:00 +0100</pubDate>
      
      <guid>https://dsccommunity.org/blog/use-dscresource-common-functions-in-module/</guid>
      <description>What This article will explain the steps needed to use a version of the DscResource.Common module that has been released to the PowerShell Gallery.
The module DscResource.Common currently has 7 cmdlets.
 Get-LocalizedData New-InvalidArgumentException New-InvalidOperationException New-NotImplementedException New-InvalidResultException New-ObjectNotFoundException Test-DscParameterState  Why Historically, these functions have been duplicated into many DSC resource modules. This has resulted in duplication of effort in maintaining them as well as drift in the code base and feature set with some fixes not being included.</description>
    </item>
    
    <item>
      <title>Steps to convert a module for continuous delivery</title>
      <link>https://dsccommunity.org/blog/convert-a-module-for-continuous-delivery/</link>
      <pubDate>Mon, 30 Dec 2019 12:52:00 +0100</pubDate>
      
      <guid>https://dsccommunity.org/blog/convert-a-module-for-continuous-delivery/</guid>
      <description>You are welcome to share any comments or issues you having around this process in the Discord or Slack #DSC channel.
Before you start, here&amp;rsquo;s an overview of what the new CI looks like:    NOTE: The build is running on Linux in the CI pipeline to be able to support cross-platform DSC resources, so that makes all paths case-sensitive! Have that in mind when updating paths and folders in the configuration files.</description>
    </item>
    
    <item>
      <title>How to Use DSC Logging</title>
      <link>https://dsccommunity.org/blog/how-to-use-dsc-logging/</link>
      <pubDate>Tue, 24 Sep 2019 16:37:42 +0200</pubDate>
      
      <guid>https://dsccommunity.org/blog/how-to-use-dsc-logging/</guid>
      <description>The Local Configuration Manager (LCM) in PowerShell Desired State Configuration (DSC) logs its deployment progress and errors on several places. The most commonly known location is the event log, where errors are logged in the log: Applications and Services Logs \ Microsoft \ Windows \ Desired State Configuration \ Operational
This log contains various events that were generated during a DSC job, it is however less useful to track the progress of a running job.</description>
    </item>
    
    <item>
      <title>Realizing maintenance windows with DSC</title>
      <link>https://dsccommunity.org/blog/dsc-maintenance-windows/</link>
      <pubDate>Thu, 08 Aug 2019 18:11:05 +0200</pubDate>
      
      <guid>https://dsccommunity.org/blog/dsc-maintenance-windows/</guid>
      <description>Introduction Since 2017 I have been involved in a number of DSC projects in medium to very large enterprises. It has not been easy to implement DSC for a number of reasons. For some companies, the reason why DSC was not an option is the lack of support for maintenance windows. DSC runs whenever an internal timer expires. This is fine for some enterprises but not for all. This article summarizes the ideas and technical implementation I have worked on with two large enterprises.</description>
    </item>
    
    <item>
      <title>Steps to rename master branch to main for a DSC Community resource</title>
      <link>https://dsccommunity.org/blog/convert-master-to-main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsccommunity.org/blog/convert-master-to-main/</guid>
      <description>You are welcome to share any comments or issues you having around this process in the Discord or Slack #DSC channel.
On the 1st of October 2020, GitHub announced that the default branch name for new repositories was changing from master to main.
This post describes the process required to rename master branch to main for a DSC community resource module. It is up to individual maintainers if they wish to rename master to main on their repositories</description>
    </item>
    
    <item>
      <title>Updating repo with Sampler.GitHubTasks</title>
      <link>https://dsccommunity.org/blog/updating-sampler-github-tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsccommunity.org/blog/updating-sampler-github-tasks/</guid>
      <description>A lot of improvements have been made to the Sampler module and templates in the last couple of weeks, and it&amp;rsquo;s a (small) breaking change that needs a manual update to your repos.
We knew for a long time that Sampler was needed some refactor to make it more testable and maintainable. A while ago, we took some shortcuts we knew we&amp;rsquo;d have to refactor at some point, and we finally did it!</description>
    </item>
    
  </channel>
</rss>
